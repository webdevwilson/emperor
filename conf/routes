# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                               controllers.Core.index(page: Int ?= 1, count: Int ?= 10)

GET     /admin                          controllers.Admin.index
GET     /admin/reindex                  controllers.Admin.reindex

GET     /admin/group                    controllers.admin.Group.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/group/create             controllers.admin.Group.create
GET     /admin/group/:id                controllers.admin.Group.item(id: Long)
POST    /admin/group/:id                controllers.admin.Group.update(id: Long)
GET     /admin/group/edit/:id           controllers.admin.Group.edit(id: Long)
POST    /admin/group                    controllers.admin.Group.add

GET     /admin/permission_scheme          controllers.admin.PermissionScheme.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/permission_scheme/group/:id/:permissionId controllers.admin.PermissionScheme.group(id: Long, permissionId: String)
POST    /admin/permission_scheme/group/:id controllers.admin.PermissionScheme.addGroup(id: Long)
GET     /admin/permission_scheme/user/:id/:permissionId controllers.admin.PermissionScheme.user(id: Long, permissionId: String)
POST    /admin/permission_scheme/user/:id controllers.admin.PermissionScheme.addUser(id: Long)
GET     /admin/permission_scheme/create   controllers.admin.PermissionScheme.create
GET     /admin/permission_scheme/:id      controllers.admin.PermissionScheme.item(id: Long)
POST    /admin/permission_scheme/:id      controllers.admin.PermissionScheme.update(id: Long)
GET     /admin/permission_scheme/edit/:id controllers.admin.PermissionScheme.edit(id: Long)
POST    /admin/permission_scheme          controllers.admin.PermissionScheme.add

GET     /admin/role                     controllers.admin.Role.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/role/create              controllers.admin.Role.create
GET     /admin/role/:id                 controllers.admin.Role.item(id: Long)
POST    /admin/role/:id                 controllers.admin.Role.update(id: Long)
GET     /admin/role/edit/:id            controllers.admin.Role.edit(id: Long)
POST    /admin/role                     controllers.admin.Role.add

GET     /admin/test/generate            controllers.admin.Test.generate

GET     /admin/ticket/linktype          controllers.admin.TicketLinkType.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/ticket/linktype/create   controllers.admin.TicketLinkType.create
GET     /admin/ticket/linktype/:id      controllers.admin.TicketLinkType.item(id: Long)
POST    /admin/ticket/linktype/:id      controllers.admin.TicketLinkType.update(id: Long)
GET     /admin/ticket/linktype/edit/:id controllers.admin.TicketLinkType.edit(id: Long)
POST    /admin/ticket/linktype          controllers.admin.TicketLinkType.add

GET     /admin/ticket/priority          controllers.admin.TicketPriority.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/ticket/priority/create   controllers.admin.TicketPriority.create
GET     /admin/ticket/priority/:id      controllers.admin.TicketPriority.item(id: Long)
POST    /admin/ticket/priority/:id      controllers.admin.TicketPriority.update(id: Long)
GET     /admin/ticket/priority/edit/:id controllers.admin.TicketPriority.edit(id: Long)
POST    /admin/ticket/priority          controllers.admin.TicketPriority.add

GET     /admin/ticket/severity          controllers.admin.TicketSeverity.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/ticket/severity/create   controllers.admin.TicketSeverity.create
GET     /admin/ticket/severity/:id      controllers.admin.TicketSeverity.item(id: Long)
POST    /admin/ticket/severity/:id      controllers.admin.TicketSeverity.update(id: Long)
GET     /admin/ticket/severity/edit/:id controllers.admin.TicketSeverity.edit(id: Long)
POST    /admin/ticket/severity          controllers.admin.TicketSeverity.add

GET     /admin/ticket/status            controllers.admin.TicketStatus.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/ticket/status/create     controllers.admin.TicketStatus.create
GET     /admin/ticket/status/:id        controllers.admin.TicketStatus.item(id: Long)
POST    /admin/ticket/status/:id        controllers.admin.TicketStatus.update(id: Long)
GET     /admin/ticket/status/edit/:id   controllers.admin.TicketStatus.edit(id: Long)
POST    /admin/ticket/status            controllers.admin.TicketStatus.add

GET     /admin/ticket/type              controllers.admin.TicketType.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/ticket/type/create       controllers.admin.TicketType.create
GET     /admin/ticket/type/:id          controllers.admin.TicketType.item(id: Long)
POST    /admin/ticket/type/:id          controllers.admin.TicketType.update(id: Long)
GET     /admin/ticket/type/edit/:id     controllers.admin.TicketType.edit(id: Long)
POST    /admin/ticket/type              controllers.admin.TicketType.add

GET     /admin/user                     controllers.admin.User.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/user/create              controllers.admin.User.create
GET     /admin/user/:id                 controllers.admin.User.item(id: Long)
PUT     /admin/user/:id/group/:gid      controllers.admin.User.addToGroup(id: Long, gid: Long)
DELETE  /admin/user/:id/group/:gid      controllers.admin.User.removeFromGroup(id: Long, gid: Long)
POST    /admin/user                     controllers.admin.User.add

GET     /admin/workflow                 controllers.admin.Workflow.index(page: Int ?= 1, count: Int ?= 10)
GET     /admin/workflow/create          controllers.admin.Workflow.create
GET     /admin/workflow/:id             controllers.admin.Workflow.item(id: Long)
POST    /admin/workflow/:id             controllers.admin.Workflow.update(id: Long)
GET     /admin/workflow/edit/:id        controllers.admin.Workflow.edit(id: Long)
GET     /admin/workflow/modify/:id      controllers.admin.Workflow.modify(id: Long)
POST    /admin/workflow                 controllers.admin.Workflow.add
POST    /admin/workflow/save/:id        controllers.admin.Workflow.save(id: Long)

GET     /api/group/startswith           controllers.api.Group.startsWith(q: Option[String], callback: Option[String])
GET     /api/group/:id/users            controllers.api.Group.users(id: Long, callback: Option[String])
PUT     /api/group/:id/:username        controllers.api.Group.addUser(id: Long, username: String, callback: Option[String])
DELETE  /api/group/:id/:userId          controllers.api.Group.removeUser(id: Long, userId: Long, callback: Option[String])

GET     /api/permission                 controllers.api.Permission.index(callback: Option[String])

GET     /api/permission_scheme/:id/users/:permissionId controller.api.PermissionScheme.permissionUsers(id: Long, permissionId: String, callback: Option[String])
GET     /api/permission_scheme/:id/groups/:permissionId controller.api.PermissionScheme.permissionGroups(id: Long, permissionId: String, callback: Option[String])
DELETE  /api/permission_scheme/:id/:perm/group/:groupId controller.api.PermissionScheme.removeGroup(id: Long, perm: String, groupId: Long, callback: Option[String])
DELETE  /api/permission_scheme/:id/:perm/user/:userId controller.api.PermissionScheme.removeUser(id: Long, perm: String, userId: Long, callback: Option[String])

GET     /api/project/:id                controllers.api.Project.item(id: Long, callback: Option[String])

POST    /api/third/github/commit        controllers.api.third.GitHub.commit

GET     /api/ticket/link/:ticketId      controllers.api.Ticket.links(ticketId: String, callback: Option[String])
PUT     /api/ticket/link/:ticketId      controllers.api.Ticket.link(ticketId: String, callback: Option[String])
DELETE  /api/ticket/link/:ticketId/:id  controllers.api.Ticket.deleteLink(ticketId: String, id: Long, callback: Option[String])
GET     /api/ticket/search              controllers.api.Ticket.search(page: Int ?= 1, count: Int ?= 10, query: String ?= "*", sort: Option[String] = None, order: Option[String] = None, callback: Option[String])
GET     /api/ticket/startswith          controllers.api.Ticket.startsWith(q: Option[String], callback: Option[String])
GET     /api/ticket/:id                 controllers.api.Ticket.item(id: String, callback: Option[String])

GET     /api/linkticket/:id             controllers.api.LinkTicket.item(id: String, callback: Option[String])
PUT     /api/linkticket/:id             controllers.api.LinkTicket.link(id: String, callback: Option[String])

GET     /api/user/startswith            controllers.api.User.startsWith(q: Option[String], callback: Option[String])

GET     /auth/login                     controllers.Auth.login(redirectUrl: String ?= "/")
GET     /auth/logout                    controllers.Auth.logout
POST    /auth/login                     controllers.Auth.doLogin(redirectUrl: String ?= "/")

GET     /project/create                 controllers.Project.create
GET     /project/edit/:id               controllers.Project.edit(id: Long)
GET     /project/list                   controllers.Project.list(page: Int ?= 1, count: Int ?= 10)
GET     /project/:id                    controllers.Project.item(id: Long, page: Int ?= 1, count: Int ?= 10)
POST    /project/:id                    controllers.Project.update(id: Long)
GET     /project                        controllers.Project.index(page: Int ?= 1, count: Int ?= 10)
POST    /project                        controllers.Project.add

GET     /search                         controllers.Search.index(page: Int ?= 1, count: Int ?= 10, query: String ?= "*", sort: Option[String] = None, order: Option[String] = None)

GET     /stack                          controllers.Stack.index

GET     /ticket/change/:id/:statusId    controllers.Ticket.change(id: String, statusId: Long)
GET     /ticket/create                  controllers.Ticket.create(project: Option[Long] ?= None)
GET     /ticket/:id                     controllers.Ticket.item(tab ?= "comments", id: String, page: Int ?= 1, count: Int ?= 10, query: String ?= "*")
GET     /ticket/comments/:id            controllers.Ticket.item(tab ?= "comments", id: String, page: Int ?= 1, count: Int ?= 10, query: String ?= "*")
GET     /ticket/history/:id             controllers.Ticket.item(tab ?= "history",  id: String, page: Int ?= 1, count: Int ?= 10, query: String ?= "*")

POST    /ticket/:id                     controllers.Ticket.update(id: String)
GET     /ticket/edit/:id                controllers.Ticket.edit(id: String)
POST    /ticket                         controllers.Ticket.add
POST    /ticket/assign/:id              controllers.Ticket.doAssign(id: String)
POST    /ticket/comment/:id             controllers.Ticket.comment(id: String)
GET     /ticket/link/:id                controllers.Ticket.link(id: String)
POST    /ticket/link/:id                controllers.Ticket.doLink(id: String)
POST    /ticket/resolve/:id             controllers.Ticket.doResolve(id: String)
POST    /ticket/status/:id              controllers.Ticket.status(id: String)
POST    /ticket/unresolve/:id           controllers.Ticket.doUnResolve(id: String)

GET     /timeline                       controllers.Timeline.index(page: Int ?= 1, count: Int ?= 10, query: String ?= "*")

GET     /user/edit/:id                  controllers.User.edit(id: Long)
POST    /user/token/:userId             controllers.User.generateToken(userId: Long)
POST    /user/:id/password              controllers.User.updatePassword(id: Long)
POST    /user/:id                       controllers.User.update(id: Long)
GET     /user/:id                       controllers.User.item(id: Long, page: Int ?= 1, count: Int ?= 10)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                 controllers.Assets.at(path="/public", file)
